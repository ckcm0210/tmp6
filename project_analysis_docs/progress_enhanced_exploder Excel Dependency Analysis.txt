Excel Dependency Analysis 系統檔案關係總結報告
日期: 2025-01-10
用戶: ckcm0210
對話主題: INDEX函數支援及圖表顯示問題

🎯 核心問題與解決方案
問題1: INDEX函數無法正確explode
現象: INDEX函數解析後沒有展開子節點
根因: progress_enhanced_exploder.py 缺少INDEX解析支援
解決: 添加完整的INDEX解析邏輯，包括參數提取、靜態引用構建等
問題2: resolved formula無法在樹狀圖顯示
現象: INDEX解析的resolved結果不顯示在worksheet tree中
根因: worksheet_tree.py 的條件判斷只支援INDIRECT
解決: 修改條件為 has_indirect or has_index
問題3: resolved formula無法在依賴圖顯示
現象: INDEX的resolved結果不顯示在dependency graph中
根因: GraphGenerator類缺少INDEX支援和顯示選項
解決: 添加完整的resolved處理邏輯和控制選項
🏗️ 系統架構與檔案關係
核心處理流程
Code
用戶操作 → progress_enhanced_exploder.py → worksheet_tree.py → GraphGenerator
    ↓              ↓                           ↓               ↓
  explode       解析&分析                   樹狀顯示        圖表顯示
主要檔案及職責
1. progress_enhanced_exploder.py
職責: 🔧 核心分析引擎

功能: 執行實際的dependency explosion分析
處理: INDIRECT、INDEX、範圍引用、循環檢測
輸出: 完整的依賴樹節點結構
關鍵方法:
explode_dependencies() - 主要分析方法
_resolve_indirect_with_excel() - INDIRECT解析
_resolve_index_with_excel_corrected_simple() - INDEX解析
_create_node_with_dynamic_functions() - 節點創建
2. worksheet_tree.py
職責: 🌳 樹狀視圖顯示

功能: 將exploder的結果轉換為TreeView顯示
處理: 節點標籤格式化、resolved formula顯示
關鍵方法:
populate_tree() - 樹狀結構建立
修改點: if (node.get('has_indirect', False) or node.get('has_index', False)):
3. GraphGenerator類
職責: 📊 圖表視覺化

功能: 生成獨立的HTML依賴關係圖
處理: 節點佈局、用戶交互選項、resolved formula顯示
關鍵方法:
_generate_standalone_html() - HTML生成
updateNodeLabels() - JavaScript節點標籤更新
🔄 功能實現的檔案修改鏈
實現INDEX支援的完整修改鏈:
progress_enhanced_exploder.py

✅ 添加_resolve_index_with_excel_corrected_simple()
✅ 修改explode_dependencies()支援INDEX處理
✅ 更新_create_node_with_dynamic_functions()
worksheet_tree.py

✅ 修改resolved formula顯示條件
✅ 確保INDEX節點正確顯示resolved內容
GraphGenerator

✅ 添加resolved formula處理邏輯
✅ 實現分行顯示功能
✅ 添加用戶控制選項
⚙️ 配置與選項
Display Options 最終版本:
Hide Address File Name - 隱藏檔案路徑
Show Full Address Path - 顯示完整地址路徑
Show Full Formula Path - 顯示完整公式路徑
Show Full Resolved Path - 顯示完整resolved路徑
預設值:
Vertical Spacing: 250px (原450px)
Font Size: 14px
UI Font Size: 14px
🔍 關鍵技術細節
INDEX解析流程:
函數提取: _extract_all_index_functions_debug()
參數解析: _extract_index_parameters_accurate_debug()
靜態引用構建: _build_static_reference_from_index_simple()
子節點處理: 自動explode到resolved的引用
Resolved Formula顯示邏輯:
JavaScript
// 動態函數(INDEX/INDIRECT)無條件顯示
if (node.has_dynamic_function) {
    shouldShowResolved = true;
    resolvedToUse = showFullResolved ? node.full_resolved_formula : node.short_resolved_formula;
}
// 其他函數根據用戶選項決定
else if (showFullResolved) {
    shouldShowResolved = true;
    resolvedToUse = node.full_resolved_formula;
}
文字分行處理:
套用範圍: Formula和Resolved內容
最大寬度: 60字符
分割方式: 按空格分割，避免節點過寬
🚨 重要發現與教訓
架構理解:
單一檔案修改的局限性: 以為只修改exploder就能完成所有功能
顯示層分離: 分析邏輯和顯示邏輯分佈在不同檔案
多層次依賴: exploder → tree view → graph view 的完整鏈路
修改策略:
分析層: 先確保progress_enhanced_exploder.py正確解析
顯示層: 再修改worksheet_tree.py和GraphGenerator
測試驗證: 每層修改後都要測試上下游影響
常見陷阱:
條件判斷遺漏: 只改了has_indirect，忘記has_index
數據傳遞斷層: exploder生成了resolved，但顯示層沒接收
JavaScript事件失效: HTML控制項更新後需要重新綁定事件
📝 未來維護指南
新增動態函數支援時需要修改:
progress_enhanced_exploder.py: 添加解析邏輯
worksheet_tree.py: 更新顯示條件
GraphGenerator: 添加圖表支援
測試所有顯示層: 確保完整鏈路正常
顯示選項修改時需要檢查:
HTML控制項: 新增checkbox/slider
JavaScript事件: 綁定change事件
標籤更新邏輯: 修改updateNodeLabels函數
CSS樣式: 確保控制面板寬度足夠
建議: 建立完整的測試流程，從explode→tree→graph，確保每個環節都正常工作。